import React, { useState, useEffect } from "react";

const DodgerGame = () => {
  const [playerX, setPlayerX] = useState(50);
  const [obstacleY, setObstacleY] = useState(-10);
  const [obstacleX, setObstacleX] = useState(Math.random() * 90);
  const [gameOver, setGameOver] = useState(false);

  useEffect(() => {
    const handleKeyDown = (e) => {
      if (gameOver) return;

      if (e.key === "ArrowLeft") {
        setPlayerX((prev) => Math.max(prev - 10, 0));
      } else if (e.key === "ArrowRight") {
        setPlayerX((prev) => Math.min(prev + 10, 90));
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [gameOver]);

  useEffect(() => {
    if (gameOver) return;

    const interval = setInterval(() => {
      setObstacleY((prevY) => {
        if (prevY >= 100) {
          let newX;
          do {
            newX = Math.random() * 90;
          } while (Math.abs(newX - playerX) < 15);

          setObstacleY(-10);
          setObstacleX(newX);
        }
        return prevY + 2;
      });
    }, 50);

    return () => clearInterval(interval);
  }, [gameOver, playerX]);

  useEffect(() => {
    if (
      obstacleY >= 85 &&
      playerX < obstacleX + 10 &&
      playerX + 10 > obstacleX
    ) {
      setGameOver(true);
    }
  }, [obstacleY, playerX, obstacleX]);

  const restartGame = () => {
    setPlayerX(50);
    setObstacleY(-10);
    setObstacleX(Math.random() * 90);
    setGameOver(false);
  };

  return (
    <div
      style={{
        position: "relative",
        width: "100vw",
        height: "100vh",
        backgroundColor: "#1a1a1a",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      {gameOver && (
        <div style={{ position: "absolute", top: "20px", color: "red", fontSize: "24px" }}>
          Game Over!
          <button 
            onClick={restartGame} 
            style={{
              marginLeft: "10px",
              padding: "8px 16px",
              backgroundColor: "white",
              border: "none",
              borderRadius: "5px",
              cursor: "pointer",
            }}
          >
            Restart
          </button>
        </div>
      )}

      {/* Player */}
      <div
        style={{
          position: "absolute",
          bottom: "10%",
          width: "40px",
          height: "40px",
          backgroundColor: "blue",
          borderRadius: "5px",
          left: `${playerX}%`,
          transition: "left 0.1s ease-in-out",
        }}
      />

      {/* Falling Obstacle */}
      <div
        style={{
          position: "absolute",
          width: "40px",
          height: "40px",
          backgroundColor: "red",
          borderRadius: "5px",
          top: `${obstacleY}%`,
          left: `${obstacleX}%`,
          transition: "top 0.05s linear",
        }}
      />

      {/* Buttons */}
      <div style={{ position: "absolute", bottom: "20px", display: "flex", gap: "10px" }}>
        <button
          style={{ padding: "10px", backgroundColor: "white", border: "none", borderRadius: "5px", cursor: "pointer" }}
          onClick={() => setPlayerX((prev) => Math.max(prev - 10, 0))}
        >
          Left
        </button>
        <button
          style={{ padding: "10px", backgroundColor: "white", border: "none", borderRadius: "5px", cursor: "pointer" }}
          onClick={() => setPlayerX((prev) => Math.min(prev + 10, 90))}
        >
          Right
        </button>
      </div>
    </div>
  );
};

export default DodgerGame;
